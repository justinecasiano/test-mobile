name: Build and Release (Staging and Production)

on:
  workflow_dispatch:
  push:
    branches: [staging, main]

permissions:
  contents: write

jobs:
  check_commit:
    name: Check commit message
    runs-on: ubuntu-latest
    outputs:
      type: ${{ steps.conventional.outputs.type }}
      prefix: ${{ steps.tagprefix.outputs.prefix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check conventional commit prefix
        id: conventional
        run: |
          echo "🔍 Checking commit message for Conventional Commit format..."
          if git rev-parse HEAD^2 >/dev/null 2>&1; then
            COMMIT_MSG=$(git log -1 --pretty=%B HEAD^2 --no-merges)
          else
            COMMIT_MSG=$(git log -1 --pretty=%B --no-merges)
          fi
          echo "Commit message: $COMMIT_MSG" 

          if [[ "$COMMIT_MSG" =~ ^(feat|fix|perf|refactor|test|build|chore|ci)(\(.+\))?:\  ]]; then
            TYPE=${BASH_REMATCH[1]}
            echo "✅ Valid commit type detected: $TYPE" 
            echo "type=$TYPE" >> "$GITHUB_OUTPUT"
          else
            echo "::error::Invalid commit message format"
            exit 1
          fi

      - name: Set tag prefix
        id: tagprefix
        run: |
          if [ "${{ github.ref_name }}" = "staging" ]; then
            echo "prefix=staging" >> $GITHUB_OUTPUT
          else
            echo "prefix=production" >> $GITHUB_OUTPUT
          fi

  build-and-release:
    name: Build and release
    needs: check_commit
    if: needs.check_commit.outputs.type != 'chore' && needs.check_commit.outputs.type != 'ci' && needs.check_commit.outputs.type != 'test'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

      - name: Generate version and changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          skip-version-file: true
          skip-commit: true
          tag-prefix: ${{ needs.check_commit.outputs.prefix }}-v

      #  No write access on protected branches to update version in build file
      # - name: Update build.gradle.kts version
      #   run: |
      #     sed -i 's/versionName = ".*"/versionName = "${{ steps.changelog.outputs.version }}"/' app/build.gradle.kts

      - name: Build release apk
        run: ./gradlew assembleRelease --no-daemon --stacktrace

      - name: Rename apk
        run: mv app/build/outputs/apk/release/app-release-unsigned.apk app/build/outputs/apk/release/gathr-${{ needs.check_commit.outputs.prefix }}-v${{ steps.changelog.outputs.version }}.apk

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: app/build/outputs/apk/release/gathr-${{ needs.check_commit.outputs.prefix }}-v${{ steps.changelog.outputs.version }}.apk

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check_commit.outputs.prefix }}-v${{ steps.changelog.outputs.version }}
          name: ${{ needs.check_commit.outputs.prefix }}-v${{ steps.changelog.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ github.ref_name == 'staging' }}
          files: app/build/outputs/apk/release/gathr-${{ needs.check_commit.outputs.prefix }}-v${{ steps.changelog.outputs.version }}.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}